import base64
import collections
import json
import os
import random
import urllib
import urllib.parse
import urllib.request

# TODO:
#  * Multiple namespaces
#  * Restoring response from file/string
#  * Floating activations
#  * Negative testing that we correctly fail invalid responses

token = "WyI3NzkxIiwiSkV6QmE3TVFDSU5jSmdSQXNwZXdCdnZSODNGeitQYnNDVDltckVvUSJd"
product_id = 4848
activations = [
("BPPQM-RQKNJ-CLPLG-SJTTR", "a"),
("BJGTY-TGFJH-URSBB-OXLWU", "a"),
("DGQEI-LOAAL-EIPST-UOOSZ", "a"),
("KCOFZ-UINVL-TIKHK-UJOKS", "a"),
("JHSAZ-ZTFBS-ZJKWZ-MJUZV", "a"),
("MRWNL-CFHMA-ZZYQL-LXIEI", "a"),
("KZMJG-CYOWN-ALGMJ-QOOEJ", "a"),
("HDZNE-XSGEK-JDQHB-LKOZY", "a"),
("KGXYK-HHMWU-JOCST-RDAID", "a"),
("JSQZE-MZEIW-ARMWN-NVPEA", "a"),
("IAFMJ-FQJIL-ELLEA-OBUXP", "a"),
("JPCOK-ZLANU-ODTZL-XEZPE", "a"),
("JLDZP-MPYIF-OETFB-MUKFV", "a"),
("BOGYM-YBPEE-RLGYC-DXHME", "a"),
("FWAJK-QPQAT-YNBVA-WEQWF", "a"),
("HBTHL-CSJBN-XXOXS-MDURA", "a"),
("LJBJI-OGDFE-PJOJY-LRUXF", "a"),
("JFRYC-XASZZ-HOBJS-CVJZO", "a"),
("LFUQU-EJUNI-GDBJO-TPKND", "a"),
("FCGZR-BQMWD-XBDSH-IQCGC", "a"),
("KNGQG-GBVYI-MXVZT-JSKIP", "a"),
("EFXNN-HVEPI-KYAOI-WTXVS", "a"),
("JWPRT-ZZAKF-DJRCY-RAXOR", "a"),
("JIKEH-ITKTK-VRUZJ-ESNTY", "a"),
("MMECF-NVIYN-UOFOU-ZJGET", "a"),
("JSZPX-AYHQI-RNTMB-PBCCY", "a"),
("HENYY-QREMU-ZMGTH-NZPDL", "a"),
("HPQGB-CGSJG-BRJZG-JKNXE", "a"),
("DZBZW-QRUHU-KTCZJ-BBMTZ", "a"),
("IKLRL-IJISM-HIIFO-RQIGE", "a"),
("JELUG-PGYWI-KWRIF-WHLQN", "a"),
("EJWYT-ERGXC-AOJWB-ESOGO", "a"),
("KQFSI-NXXZU-VROHV-KZAED", "a"),
("IEZNG-HEFKO-HJZMZ-PQQOY", "a"),
("CSSUS-PRPZX-APUMJ-OTIMF", "a"),
("LUWIT-VTYPL-VGWAE-RXUSK", "a"),
("GHNPF-ONQBZ-DJGSE-CTRIL", "a"),
("FBKRV-JYPLT-LLZVK-BACAA", "a"),
("DBOHG-RJKRF-BBBPC-BXDRL", "a"),
("GOHSM-OEHYS-MLFAA-WMJSC", "a"),
("BVOUV-CSELK-SJLAJ-CJDWL", "a"),
("GYXXP-PEEDM-FRAMB-CYSDG", "a"),
("FKFER-LLNHX-CICRV-TNCJT", "a"),
("ELONU-IOZMV-VNCFQ-FHWLA", "a"),
("DPTOK-QWYYA-LTHGY-QUILB", "a"),
("GCHIF-JMQSK-LMAOA-IRWUY", "a"),
("LMDFM-ZWWQT-MRBUN-ERZND", "a"),
("ICPCE-SXAFU-OWAQW-LXAIK", "a"),
("CBCYW-XNMJU-XMHPI-QFEMT", "a"),
("IWFVF-XWMBB-TKSGW-MVEKI", "a"),
("KMVCO-JVSPG-QRCYQ-KEOBT", "a"),
("IDUGW-SPFTL-OVUWJ-ORZCG", "a"),
("DUZFW-PHCAA-JKGBI-GTEHJ", "a"),
("EBFQN-SWFIU-YHJXW-SSIDK", "a"),
("DOFFA-RNVIU-QAPAL-LJLDX", "a"),
("DJFGI-FNTFR-SODCY-NFUYS", "a"),
("LXVYZ-BHIUE-ZJEOZ-ZTACP", "a"),
("ETOBF-ESCTJ-POFSF-WTLEA", "a"),
("DGRBZ-XWQAH-MYVCP-ERNDD", "a"),
("KBXWE-CYNSG-ECTTQ-WOQNM", "a"),
("DJQHJ-JQBPV-BIQKA-RWHTF", "a"),
("CZYXJ-NWNXC-KXRFA-OZQLK", "a"),
("HLYTJ-BNAAS-ECEDS-YMZKJ", "a"),
("IGJUP-BIPIK-IQDXM-NRVMO", "a"),
("EUGFW-CEDCU-KBPQE-OYSCX", "a"),
("CZZMH-TIPIB-JFPIK-HAXPC", "a"),
("HIIAR-WVBCL-GUWWM-ZNIMF", "a"),
("EZOXQ-VIXIV-QCFLM-UIGNM", "a"),
("FLIGT-PXEWT-XGYPR-VJUUH", "a"),
("JFFQK-LWIDM-CRUEU-JKGJW", "a"),
("FJRZF-WOGQK-XNKJH-MIKYB", "a"),
("CJIFY-MRTLK-ZZKJQ-FGYPU", "a"),
("FXBUI-SRKCA-WIGOJ-SAGXN", "a"),
("CURMJ-QQKKL-QNQPI-KAHQA", "a"),
("GQSOP-PSSZM-YJGKF-QEQJT", "a"),
("JXGFY-VBSHP-NDWNN-IWRWO", "a"),
("LETOM-COTDS-KKZBX-ECDSP", "a"),
("GSMOL-DTGKI-HTYBH-CJVNS", "a"),
("BOFXY-LMTBE-QBEHD-IUNSZ", "a"),
("HVTPF-BGZTY-IKQCF-FUZXY", "a"),
("JLVLV-LMREA-GQFLI-OZFHR", "a"),
("NASSM-RAHSP-LJNZS-QJSAU", "a"),
("MVFNN-XXZHR-WURZL-WNEOB", "a"),
("HRKXA-YNAAR-PQDBK-NIQVU", "a"),
("DQPQI-TPSKJ-QTFYX-QPARV", "a"),
("LVUSH-HBLIL-IOOWL-VYGWE", "a"),
("FELZI-RUOTZ-SCFEG-TPLLX", "a"),
("HOPQL-HISHD-MGNSC-EMWAS", "a"),
("GSTHD-ZCVHE-RWYNV-CTTXR", "a"),
("HQULG-MNEBS-VBZWI-LICDG", "a"),
("FZTFN-TDIZW-VKEEP-LISGZ", "a"),
("MORUY-EVYVR-SRRHC-YZRCO", "a"),
("KFXVZ-BYIGQ-NJMRH-ADGLB", "a"),
("CPVBT-NVGGM-WNKHH-HWPTG", "a"),
("LQANF-MOYCD-JZNOU-YFTUV", "a"),
("EKRHP-WWEDJ-CVCWY-PGNSK", "a"),
("JZCQJ-MTPKA-MQZTO-TAROT", "a"),
("MGHQP-PMGUV-FAYNM-JOGCI", "a"),
("EKIJB-RTNKR-REBTW-ORTNP", "a"),
("HUCZD-NJZZJ-FEGCQ-UPYZU", "a"),
("INFUV-NFYWF-HDMXF-LHCLJ", "a"),
("BPGTW-ZSLKD-JKATS-VYWYA", "a"),
("FAAXS-NBERG-DLYFX-BMEYJ", "a"),
("FFVHD-XNQZN-IOHYL-RXHZM", "a"),
("IVGQG-SEEXW-PLMRN-BAYRR", "a"),
("FHNQU-ECMFL-AYJWH-DYZCU", "a"),
("BPCGM-EYXVK-PNHHP-EPPCV", "a"),
("GOWAK-WHCLW-UKJXU-RCFWO", "a"),
("MOJNO-COLJK-DTERX-LJTVZ", "a"),
("FCGXS-CJADL-HESNJ-JEWEQ", "a"),
("LJJKX-MTGBY-JMDZO-BBMHD", "a"),
("FKZZI-YRFYD-NSKUG-JAZWS", "a"),
("JRFZV-MVOFI-FUGDC-BNPEH", "a"),
("IQFYI-GQDZY-KOKFH-AMDVW", "a"),
("IQPKQ-GHBFV-OOYKD-BOAAF", "a"),
("MEUOG-XQWLM-TJJUR-QDNVY", "a"),
("JBFTP-QJANL-JQTJJ-YZIWD", "a"),
("FNTAJ-NKQSS-HSSMI-SJOGM", "a"),
("KICTD-DQUMW-TPXYE-AUTXH", "a"),
("DPUGF-FKGOV-SRGBX-MSDFM", "a"),
("KQHAB-GAOLZ-WZEKM-PWGEL", "a"),
("JUVRN-VLQSA-JKCDP-CRTAY", "a"),
("CDBRQ-ANBUE-LSZLZ-QMNZP", "a"),
("BIZRK-EEYZE-MUKZH-ESGVE", "a"),
("BOTSU-LVFUA-GXRXI-MSEMX", "a"),
("IOEQI-IFLNT-GJYPS-QDHWA", "a"),
("JYOER-KNTGR-HTLSQ-PZJFT", "a"),
("JIYOK-OHVIC-VHTLW-JOENQ", "a"),
("JCIDH-QWYUR-ZWWOY-ZATOL", "a"),
("KAVCQ-DLRYN-BJQXG-UIAGY", "a"),
("DAOKC-BZKRG-MGRCI-MIOHH", "a"),
("HNLRK-PNROX-VOSZB-LGVRI", "a"),
("MFOOW-OAEPA-EVYVW-XMOOD", "a"),
("MTRMN-TWVZI-EZYCX-YYIYI", "a"),
("DDSPY-OHKAY-JVCAK-PQWTD", "a"),
("CGIBA-RKJFC-QOEPS-GHZRE", "a"),
("FYRMR-GBLKZ-MRGZW-ZCASH", "a"),
("LOCVM-VIWHF-AQECF-RYGEM", "a"),
("LNPML-YXUUI-SPELC-PRWZD", "a"),
("GELZQ-QEXOL-OEKKB-WLRVA", "a"),
("IDKJF-CQVIC-NPVBH-QOOYH", "a"),
("ETTOO-WWKUH-TVJCA-JOMDC", "a"),
("BXMYQ-BRPNH-GSYVQ-TEDRL", "a"),
("JBRWF-YPDCB-QOTEE-GKKNY", "a"),
("CWORN-AARWQ-QRHAM-GMZEX", "a"),
("DQOOT-HJCON-MVBZY-QVBZO", "a"),
("JNIRR-KNQTM-KBDJD-JANCN", "a"),
("DSBXR-BMMUK-JFTFV-DUURM", "a"),
("MOBGT-LQDAN-XYXMR-SSMAH", "a"),
("KMRKR-PSCVA-MJTDW-WJWNW", "a"),
("IQZWW-OLNDD-JJQBH-LKBMN", "a"),
("CJHIZ-LXEQS-RILYQ-HYZAW", "a"),
("KXYSY-VEARH-ZYVOW-JZGCH", "a"),
("GMGCT-WODMJ-LZBWF-DFTAI", "a"),
("DRBBR-BTTFD-PTRCM-SAXEJ", "a"),
("EFMNY-VUEQE-RARRQ-OWPLE", "a"),
("GDUBN-AWUEK-UNEQS-QCJYL", "a"),
("IXVNI-QHRCY-SWXIE-IKYNO", "a"),
("JLVPQ-ISIYO-REXWY-TURZT", "a"),
("FNJJV-TQKYK-XSEEM-KEAKO", "a"),
("MOHTK-JGHBP-ZGMVH-BOIRZ", "a"),
("GURNP-NAKCH-IAIWO-SDAYM", "a"),
("BTDVT-IVPII-YTUJJ-UCCKZ", "a"),
("GRLOR-GZMUX-IEKRC-YPNGO", "a"),
("GVTPH-PTHNS-MGTRU-TTBWP", "a"),
("MIOXR-PCEAL-OMIVZ-TBOLK", "a"),
("GVIGX-EUOMH-EHHGC-WIENX", "a"),
("EAAKH-VEXNL-IQBRX-HQECG", "a"),
("IEFID-BHBMW-ROUPZ-MNJXZ", "a"),
("GIITQ-MVYIZ-ZWDRW-GLPVG", "a"),
("DQHVF-MLGVU-GPJSH-PJVBX", "a"),
("BLZPL-JPXPH-GZMVY-MKQAO", "a"),
("CSVYH-YCJRA-LMLIL-MJECT", "a"),
("HDWLI-DVSDH-MKDRK-THSPK", "a"),
("MTGOW-UYAET-RNMHF-JIFTP", "a"),
("CREZV-PQCAN-TXUQZ-LZUXE", "a"),
("GJMNX-NKVPL-VNRHK-GVPGD", "a"),
("DUFYS-SYTIM-TCGKE-WVCEM", "a"),
("MFUZU-JSZXD-PSMCH-KXCAF", "a"),
("DBZSR-KXLIV-LYFXA-JNNVY", "a"),
("KVEPD-NTBQE-FXXJH-JLQRF", "a"),
("CGNSA-GMMED-OSPDE-NIIJO", "a"),
("CRFAS-ONBBX-UEPCK-SHOJP", "a"),
("LNGCC-AKPXU-GGUOF-PXGNY", "a"),
("EDFCF-JNSCR-OBPLJ-TDHDZ", "a"),
("DFJTE-SVJQV-ZVPLY-VGCBK", "a"),
("FNLCM-IIWJE-YKWAF-DFQUN", "a"),
("IFGNN-XBQDZ-GTVDB-QJKHI", "a"),
("MPZFO-NNWJD-RGFXU-CRKOT", "a"),
("BRJSB-JFDNL-IBDTE-ZCVIM", "a"),
("FDPRD-PWZQO-MYZVS-YDQMB", "a"),
("JPOAH-XKJXU-HFKXZ-CEIGW", "a"),
("CPRSC-JUTAU-ABVNB-SDXHJ", "a"),
("DTIIG-IOBHK-YYDHE-ACKYM", "a"),
("IVYPS-BNXEW-IPUUH-VIVPL", "a"),
("BXQHW-KDKUR-DVMXB-GHLZI", "a"),
("DFDBH-IHDAM-YORDM-SGPFJ", "a"),
("HUPDJ-LEUWX-ZRBGP-IVXFS", "a"),
("CBTBJ-KPBTB-GFZAI-RQVOJ", "a"),
("CEZUA-ZUBTK-CLQAX-YRRAO", "a"),
("BSYCZ-RQXYZ-UFNVL-PJRPZ", "a"),
("FSIEY-VROJI-DRKML-FEUDO", "a"),
("JWZOG-ELSHB-ZKHQR-MLFQR", "a"),
("JLUOQ-NHYLZ-QNJDB-ILNUK", "a"),
("MARZY-EFSSC-OIMBF-IBKKL", "a"),
("HLXOI-CCKOK-ERUIN-QEYIQ", "a"),
("GNIRE-WQVZT-HKWII-BLNDX", "a"),
("GHBKK-WGCZO-XQSYO-SPONA", "a"),
("KBMKV-AZDLT-HKNUV-PSVBV", "a"),
("DCQLI-KDAXB-JOUXH-BWAXO", "a"),
("BLKOE-KFZSK-XEQRR-XTMPH", "a"),
("CUUDO-OTZTD-AGOUF-ROKCK", "a"),
("GSUEA-TTYSU-HOPHN-XRWJN", "a"),
("CDOMQ-LKYCP-HJZPR-BRLIU", "a"),
("HJZFT-RVAVJ-HEZIX-KHSEB", "a"),
("CMHKM-BMGDX-QTJZQ-DZKMS", "a"),
("DGDGN-WSVUJ-MIPCX-ETHYH", "a"),
("FCRSF-KEUYU-XMJIB-CPDUA", "a"),
("DEYXO-RDZBF-XSYDZ-VKGJL", "a"),
("EVWOL-ZQPSW-HSOFO-ZJWYO", "a"),
("MRKKF-DWHRK-OLHHZ-ZQXNR", "a"),
("DWKZJ-ARVFV-OGALR-FCBEE", "a"),
("CQNDX-HXNNV-SXHBD-NNVGJ", "a"),
("DETAQ-RIFCQ-EBDNF-YVDTQ", "a"),
("IPIYK-MVGKU-DTMUR-YLDHZ", "a"),
("ILOAR-DPHVU-ZAGPV-XUCNK", "a"),
("DZBGD-QGVNH-TMHOI-SLWGJ", "a"),
("HREYK-JEFIY-YNQDP-AYCTA", "a"),
("KSMNH-RFSPZ-TDOIZ-ELTID", "a"),
("JIYUR-EDKYI-ZBQWP-NBBKY", "a"),
("FBMPY-YZOWU-SGCPX-RSRCB", "a"),
("GKLHP-VFOHW-ISHYC-PMYVI", "a"),
("MBHHL-JRHFR-PNQAA-XZAML", "a"),
("CPSRO-RUEKT-MARTP-VMRNW", "a"),
("IFHEB-OFEII-RUFWL-HTWWB", "a"),
("LBCJZ-OKPRO-ZPMTN-KMEVM", "a"),
("JZATK-OHMXT-FSHBO-IDMYH", "a"),
("LKQKB-YNAST-RLFIA-MJKFO", "a"),
("GZSOB-MEIMA-NFLNE-KKGIJ", "a"),
("HVFGM-EHABI-ZNAXT-AMYWG", "a"),
("BRZYF-IXQMV-FKCVU-JNYJB", "a"),
("JXRKJ-VSDAZ-AEYTJ-OXECI", "a"),
("DAKCB-DVUYL-OWNDB-ITNTL", "a"),
("IWSIB-KKZIV-WXGTY-HDLTE", "a"),
("ECIFH-DFLTP-ABRSJ-KZOYX", "a"),
("JYHKX-RPKUN-PHWDY-GCEBO", "a"),
("EMXVM-NVSAU-NOPOP-GDDYV", "a"),
("MXONS-JPINV-FQCBU-XXCPU", "a"),
("BSNWN-LHFLS-TYVYP-NAXHJ", "a"),
("FBVXR-YLNMF-TOKQX-EUNAY", "a"),
("GDXCZ-WZJCS-DDSBB-RCPDD", "a"),
("EOFUS-FRXZQ-ZHINZ-EVILI", "a"),
("IFAYO-WLQEH-VTXOJ-GGAMH", "a"),
("EDBKT-ATNQT-RWXGS-WZZLG", "a"),
("CZEHU-JMCCF-CXXWU-YVGPL", "a"),
("EDQCI-IENUO-TLAGE-FCZFM", "a"),
("DESOV-BZSCX-QZUDZ-PEXYX", "a"),
("GVRMT-ZYZJH-HXDRG-JUDKU", "a"),
("IFYOD-LTZRM-CUWXQ-CJKTX", "a"),
("HOALP-FOGVF-MCFOG-MQNSO", "a"),
("ESYKE-WGYFV-RAVQK-TEJIT", "a"),
("KDQSE-MQXIF-PLHRF-VRLSA", "a"),
("BJOBU-BBIAG-ZZYMY-GKXZD", "a"),
("BSDKB-FVPQQ-HRVAN-GDJOS", "a"),
("JNECR-KDDIJ-SBPHD-PGSGX", "a"),
("KHSNC-EOBOY-YXXLW-WPFRW", "a"),
("CBBMI-LAOYV-MWWEN-OGXZH", "a"),
("DZZMT-DMXGS-XEEKD-ETVQS", "a"),
("HJYKZ-UWOBO-WISJL-ACPVR", "a"),
("DNGJB-FDNKL-IIWUM-LZEUQ", "a"),
("LADJT-OZBYC-DFBTQ-ZCOVH", "a"),
("HTLER-QEKYQ-ZMJEY-QQXPA", "a"),
("FTJXR-AXXOC-OXLZW-PMMWH", "a"),
("FUXNP-EULOJ-QEVAM-CHSKA", "a"),
("ESLMZ-AEGON-GIUMY-XWQBL", "a"),
("MOAQH-UWSUB-DZCCQ-NRTZY", "a"),
("FFLQB-LBABW-ELCEL-ORGFF", "a"),
("MSSIL-QUZPL-MZIFV-VXAOU", "a"),
("ELYGF-PCTOG-AGCSY-MIQFH", "a"),
("BSKHM-PBSUT-JLTMA-WOHHI", "a"),
("MRPVZ-NZJAP-HUPPQ-SQYUD", "a"),
("DJKOF-AVFVA-WBXTM-UEGIE", "a"),
("DYXBT-CTJBX-BVMNZ-DXUND", "a"),
("HRPOS-ZWRJI-HHBKM-URJZY", "a"),
("CMQJK-WQKOM-XSNKY-ISBNJ", "a"),
("BUYDM-OUGJD-RIVRJ-WLTLO", "a"),
("CJXZG-YMOHV-EPEVP-LNFWJ", "a"),
("MKPQG-FQTOV-IXYII-XSBOC", "a"),
("HOMQQ-BZWCV-EURBT-RBMWP", "a"),
("MFOCO-RMLTV-AAHZC-RISYM", "a"),
("ILLRJ-YOLIS-LCHBB-GJTEZ", "a"),
("KQJDZ-CRTVT-FAUMY-EXYPY", "a"),
("KDXQG-CXTQZ-IXBUL-JFMEH", "a"),
("DULOR-RXQTG-UZRGL-GQHUU", "a"),
("CNEZI-BJLIO-ELOCL-DSSOF", "a"),
("HNTOM-YOOBC-WFCSL-VXYBY", "a"),
("MNZPJ-HOTFQ-IHYBK-JNRIP", "a"),
("JJNHP-QCJMV-NKDGO-MWESI", "a"),
("NABQH-IJRQN-RCNTU-NANON", "a"),
("GRPMZ-DLBIQ-DRMME-UCSHQ", "a"),
("DDUAQ-DWZPL-QCLHV-UTEHB", "a"),
("LHLJS-YUFPS-JDQQR-KKHKQ", "a"),
("FEYBK-IVFIX-HEFJY-JCXKB", "a"),
("LGMBX-XSNZP-NTFAP-HEUZY", "a"),
("DICZY-TUOWW-FEVPI-WQIVB", "a"),
("FFCGO-VTCNJ-QNELP-MZLUI", "a"),
("CPLAH-UQQLJ-YXREC-HXGCR", "a"),
("BZFSO-NFCEG-OTPLK-KHVCG", "a"),
("GNZYD-NBWET-CMBDL-WVHZZ", "a"),
("JQKXW-GUNCK-ZPHDL-BDACM", "a"),
("BJREV-UEYHQ-SHYLG-JROCF", "a"),
("BYHDX-MYORY-YUHKM-KITSK", "a"),
("EYXBX-YSYRZ-HKFPV-UWQUT", "a"),
("LQABO-ZERMF-TLFTA-CKJHC", "a"),
("HQCAJ-ODWFZ-REGTG-MMYJD", "a"),
("FHAVZ-DSPFC-VHUIP-VWDDU", "a"),
("LISJL-RKGUS-VMZWL-QLOXJ", "a"),
("NAWGT-JEYYA-OGBGX-CACGM", "a"),
("IKRBJ-NERMJ-GTUCI-BCEJX", "a"),
("HJEKU-ZHYLH-ROTKU-EZIVI", "a"),
("DOFEN-ALIGM-IJGEA-UUYGX", "a"),
("GEGAP-OZYKJ-QPCQS-GCZOU", "a"),
("GOKZX-QCUEG-FYFBH-XMYQF", "a"),
("KYAEV-DFJZX-XYCHO-BREVM", "a"),
("EYOMM-YOEET-EXJVY-NPRBR", "a"),
("HGGVH-OZFZW-REZQE-INHJK", "a"),
("GOEFT-YDPIK-VYPLW-DIJWJ", "a"),
("GMAYE-QWACA-EDCLT-JJKJQ", "a"),
("MJWVW-GOXQT-SICGX-BSZQX", "a"),
("HZZQC-JRDOT-OWXQB-BCKPO", "a"),
("GEMJA-OMKYY-LLSJK-ODOLP", "a"),
("CLTRX-QLHEV-TJTNH-BDJFQ", "a"),
("GTJUP-MFCST-VYQFE-UUXZZ", "a"),
("MLQKC-KBGLQ-OFGPE-GUQEY", "a"),
("GQXOV-TTIZK-NMKVL-FNZOZ", "a"),
("IBQHU-MDDLE-QDUOQ-AEUZI", "a"),
("LWFGT-HOBOU-PDESU-XOSXF", "a"),
("IWYZM-LVZGR-OHDVU-ZNRCU", "a"),
("EPKNA-GNZIB-NRWFQ-UWVBH", "a"),
("BIRUR-NJHVE-TJMEY-AAZFA", "a"),
("IFKVN-AEIVU-CQMWF-PXJBB", "a"),
("DVELR-BHVBQ-FGFFU-RDPGI", "a"),
("JLFJS-MVCZH-OJDHQ-ITCUB", "a"),
("JCQOY-WVATD-YNUTT-KFGLM", "a"),
("EIYYA-ZCLSC-NIFZG-NIMWP", "a"),
("FJJBK-JYASN-CUUDQ-TMBKU", "a"),
("MVZCQ-VVOXX-GYSDQ-NNFMJ", "a"),
("DKLTZ-PHXTW-NRXLZ-DWEEW", "a"),
("LUZIM-NTUPD-IQIPD-GFGEH", "a"),
("GIGXI-LUCCW-ICSED-ASYYQ", "a"),
("GDZPZ-PSUQG-RVEMG-BVZJL", "a"),
("FKZJW-JATQM-GTQCE-WXIJQ", "a"),
("EHWKC-OBJWM-WOIEN-YCAGH", "a"),
("CJRMP-FPOFU-OLFKJ-CYHPS", "a"),
("FTSTZ-NVZGM-MKSQI-UXBPT", "a"),
("MHSUY-KTNFG-ZGXYT-YUTNY", "a"),
("FODNC-ABCGS-NOABC-IBGAX", "a"),
("JLDAZ-HDCGX-DSLBZ-JTNIM", "a"),
("JRPPV-LQXZB-GLOYI-GYCVP", "a"),
("CNDBM-FHIYC-FFMKM-ADLFU", "a"),
("LQGTT-SVHVC-ITKZC-WEWJZ", "a"),
("CZRZV-TGQYY-KDKZJ-MLSCI", "a"),
("ENXUP-EDCPS-QOLSR-OEGQF", "a"),
("JSDVP-ZNMKX-IDXXB-DMUIO", "a"),
("JTQYZ-GSHRF-QUOVQ-SHYWL", "a"),
("IHTYR-WWWJB-GXUTU-MGHCA", "a"),
("GUEIG-GCSAM-ATWXD-XEJVL", "a"),
("DDMOF-QKQSA-EZAVY-DNCNQ", "a"),
("LXHDQ-NGWJW-TIRGO-LKHLJ", "a"),
("FYNHQ-JNJQI-VMZUA-KVFFG", "a"),
("DWUAE-SVDAD-POEJR-DNQRT", "a"),
("MDUOQ-TLLGS-OHPYZ-WNHLE", "a"),
("FXGGF-ZUOWC-WXGND-AOGOT", "a"),
("CKMBC-XGAZK-CEBWL-ZQUIY", "a"),
("GKXTY-FLELJ-GEHWV-CKHNL", "a"),
("FOJHJ-MSMDA-VSUTL-SPEOW", "a"),
("GIFOB-COWGZ-SXCMO-IPEAD", "a"),
("KGUVO-KQCCZ-XJBIY-DLGSY", "a"),
("FVKXP-AVAUC-HJCVY-ZMFRP", "a"),
("ELLDD-HDJVR-XSTIF-MSAYO", "a"),
("DBLXN-XVWQU-XNVZP-VMONV", "a"),
("CTKAK-GVXSC-OUCYA-KENKY", "a"),
("FJTNH-KCCQU-HLOXL-MIZKJ", "a"),
("EBGKD-UTTGM-YVJET-LPWQS", "a"),
("GJUTK-BWUAA-RUTGK-DLTIP", "a"),
("JOZLO-IOARO-ESBSO-EXEUE", "a"),
("HSMRS-PKSIO-UCPER-HQWPH", "a"),
("MVGHG-PPVXT-QQHJI-ROBUK", "a"),
("JFIEC-ZNGVK-FTSFO-PHJXV", "a"),
("KGKIA-AOLUK-MSNFR-BSXRC", "a"),
("DUKWC-OHSAQ-NLSFN-PNNZD", "a"),
("BQQSY-XAKOU-IIPOQ-WXXYW", "a"),
("KGGZH-FMZYH-BRCVD-BUSSP", "a"),
("FQOIV-FKCAV-XLDCV-DAGFS", "a"),
("ISRWQ-CGFIF-VCLJI-UEYHH", "a"),
("CMKLL-CMHNX-LOFOJ-XABKG", "a"),
("CAUFZ-EIMQR-VKXEK-XGSAX", "a"),
("MJUOZ-KNFUA-PZDFP-XACIY", "a"),
("HRBMO-OZZMK-YQQNW-EESNH", "a"),
("MYVZT-DUQNU-QIDUC-RTHTQ", "a"),
("KHOJA-FMWZO-ZYUXH-YNVVF", "a"),
("JRPBJ-UQRCK-BKNRK-FRTUY", "a"),
("FDMYB-CKTAA-BQYXB-GKDPD", "a"),
("GSMMV-WUZHA-JDTDU-PJAVM", "a"),
("KRKXQ-EJASI-WHRVC-VGFNB", "a"),
("BVUKG-ITUYT-BIIPW-TGHGQ", "a"),
("DHSTC-CVQNK-WYESU-HMBIF", "a"),
("FAENC-XEBBQ-RTCRP-YUAZA", "a"),
("HMZJK-BGBWH-IZHVN-LFRUH", "a"),
("CTGOT-WVXDA-TQSHA-XUWNS", "a"),
("HLGEQ-MBRTV-XCPHD-YMOWZ", "a"),
("MEVJX-OOJAO-GUMJJ-SNDXE", "a"),
("GACKH-HSRDB-NSHTZ-FJSLR", "a"),
("GMWBL-FKUFA-AWHTP-BDFTG", "a"),
("GPNEN-LJNXE-ZJDYH-LANJD", "a"),
("LPBTJ-ZYFSY-PCWLE-IQEJY", "a"),
("JANJI-HUYBK-ZKEFA-TZGVB", "a"),
("FDHCM-WRJOP-JVWFU-HODFG", "a"),
("FDPUC-PXPBI-FMTMU-JUEZL", "a"),
("DWHYP-MJAKZ-PPZOG-BSHRA", "a"),
("ERSTI-VEQCD-HOMYC-KWHAL", "a"),
("KDVQE-WFEEP-BGQTR-HISWE", "a"),
("MVGFF-VCVKI-JZKTK-KAOCN", "a"),
("CZFMZ-LGERF-BNDRP-ARTDY", "a"),
("JOXDK-TWEHT-TRXEN-KCILN", "a"),
("JOASC-XWUGR-CIQRE-ZCCJK", "a"),
("MXMZT-QHQLS-TBYWW-SGPJH", "a"),
("JDRRA-BOYNZ-JLZAF-JHCRU", "a"),
("LZSZG-OVCES-XAPWB-AZYOL", "a"),
("HASFG-JWLPH-VOMJW-GFNIU", "a"),
("IMTNS-SVFQL-ZSVPE-PQUSN", "a"),
("FEWDX-ZLNJO-OITZZ-FKNMW", "a"),
("HCBOG-RGDHL-ZUEPJ-UYLYH", "a"),
("MVNRR-YKFML-SAEWV-QGZDC", "a"),
("JERBJ-GLWNA-SEFUI-WICOR", "a"),
("IVOSR-BFGGX-KFMMV-BLJHE", "a"),
("MZUTR-VWXYG-PSMYY-USQFV", "a"),
("EUNDW-UKFPQ-KLRMP-IWEFG", "a"),
("IUBYC-YCLRK-MPBRO-PWFSB", "a"),
("FPSJT-RXPOQ-GCBYZ-ZKRRM", "a"),
("MJYIP-YUSJK-LROCR-SKHZV", "a"),
("INVJP-FWOOD-YADGQ-VYNFG", "a"),
("JDXQM-RAWMZ-MAYWZ-OYIUF", "a"),
("GVJYW-YVGVT-BYERW-JBCOC", "a"),
("MGPKK-ASAQB-PGCDO-MYMMH", "a"),
("DUDLX-XNLUD-AKUPG-AMFNK", "a"),
("GLTJU-KQCZF-PAPIN-QHYXD", "a"),
("GWIZV-OPLSU-FWOSU-JAZNM", "a"),
("IVNQH-GVOIO-XZEUK-NQCKX", "a"),
("BIBJO-MVTGW-FAGPW-RUYIU", "a"),
("IYQBZ-VDZAL-OQBKX-DVOGJ", "a"),
("MVSQY-UDZWC-PEXAP-WHMOC", "a"),
("CBWVD-ZEAFX-XNMBP-PPDZZ", "a"),
("JMKOE-XCTDI-LDNGT-KRNTO", "a"),
("KFVDJ-BYPZM-DWNHB-XLAYB", "a"),
("FBFZK-ESXWV-FZTYR-ZJJPY", "a"),
("LVHAL-OKVWW-IJIYJ-GZSAL", "a"),
("DOYLJ-XJBLC-EONNB-ANDBO", "a"),
("JMOJS-TKHPL-GVSMK-ICZIZ", "a"),
("IYRBX-LLUJL-SFKJG-GCNTM", "a"),
("GOOWB-AKNPW-JZNGJ-LXETZ", "a"),
("HAOTU-QYEOM-JVFAO-XVOPK", "a"),
("HLQUM-SFENF-EFQFL-WXLXH", "a"),
("JNZJW-BQNZQ-DMGLK-RCVVM", "a"),
("LIUVX-FVPHX-CEPIL-RRCBJ", "a"),
("MFIJG-SJFYX-WFSMG-WQPRO", "a"),
("CHWOQ-VGDAA-RPTFS-PMOCJ", "a"),
("HXGFT-QJDKN-QTTTD-YELRA", "a"),
("FHTCZ-HJXWT-PVXWG-RTMKL", "a"),
("JFAMA-WOPGV-VWZOP-CNDKQ", "a"),
("KSRFH-JDFCE-WBWJO-HCNTH", "a"),
("HEKGR-MNYJY-NXGHX-UCTVM", "a"),
("JIKFL-OBPXI-QKCSY-SEUTN", "a"),
("LEDLH-GDBXS-CQLJQ-VLCEU", "a"),
("HPWBL-NBPXQ-CBDHG-HMUSZ", "a"),
("MBMMO-VDLXX-VXUYA-CSJXE", "a"),
("LZHWD-JTIZH-WAMYK-JSDYT", "a"),
("JXEIG-GIEYM-QJHPM-ANZRK", "a"),
("NAMBN-NJYSW-TGGML-JFODT", "a"),
("CWHPF-ZWSFQ-MAFLK-QRXGS", "a"),
("ECSEB-AKTYG-KDNHK-PAEUL", "a"),
("MATTF-JZQVE-TPEOQ-AIVSM", "a"),
("GUPIF-GZVRY-ZCJVH-VJFFH", "a"),
("BMCXW-EYQBD-JGVSN-VYYPA", "a"),
("INLMB-WCAZU-GZNJD-UJILR", "a"),
("INBSZ-BWULW-VOGTO-EGIMQ", "a"),
("MRVED-GTIQH-HRAJC-ATAUZ", "a"),
("IIERS-EGJSJ-UGSMV-EJBBU", "a"),
("BIFAZ-TMSFI-ALTOZ-TXIAT", "a"),
("LMVRT-WBGPB-GLEHI-EEESY", "a"),
("KHHYS-DZLZT-OFUQV-UHGMV", "a"),
("EFAJU-TLZKU-SXNVY-RDHIK", "a"),
("LMEQH-DTWMR-HBUZL-METOH", "a"),
("JUKDK-BOCHB-QCOVX-PJBTW", "a"),
("DOJNL-NIWEY-PVKMM-ZTION", "a"),
("EUNBH-YRQPG-CXZFI-AEBBE", "a"),
("CWOIK-DXINN-KZJHJ-VZVKT", "a"),
("LDDGO-GMJQR-IPKZS-XVMRC", "a"),
("GMHVH-GWENU-BJTIP-OWWIN", "a"),
("DDDDT-NQHIX-MKMWE-BVVSG", "a"),
("MZCPF-LBDPP-WWOCN-ZLOHR", "a"),
("BHYNK-PHBBS-LTSFB-DMUXS", "a"),
("MPMLZ-LEGAD-CFMTL-IHZOB", "a"),
("JRDGN-LZUXO-BHZAE-INZBE", "a"),
("KRAIX-RJFNW-BCMCP-MJYWH", "a"),
("ICOYL-PYKNJ-SRXJF-BQBUQ", "a"),
("FWILT-EIMYH-OXHOV-YREIF", "a"),
("CHMHQ-CCOMM-UMMKL-GSTEK", "a"),
("BMQQU-AMTRC-GVRJL-YHVAD", "a"),
("CNRDH-VTEUK-HADAZ-GMQPK", "a"),
("EJREG-LGSEI-OCIPK-SKUGV", "a"),
("JWPBT-XEATW-XQIJI-QITYW", "a"),
("HWFNC-HRYBM-PNMQC-JLIKH", "a"),
("DLIPE-AOHLS-KARLA-WLNKE", "a"),
("IHHCX-QBLBE-IXWVH-BBASJ", "a"),
("LCCSJ-RHVNF-JNZLG-CKIDY", "a"),
("KLMTY-CQAWT-JQJIZ-HDCDZ", "a"),
("KRRBX-PPHAF-ZUIOS-JJBXG", "a"),
("ETINU-QNVIR-GPYTR-TIMHD", "a"),
("CHHGL-PPRSV-YPKLM-EMRJM", "a"),
("BNCNA-DYUMR-WAJKL-FEMRB", "a"),
("LENBT-GINRX-YVWHJ-HJIDW", "a"),
("IKGFK-ORXSX-XLKTZ-CIEJD", "a"),
("BJRYB-XXWQJ-GBMTX-JJPAK", "a"),
("BKUCI-LJEAJ-KLUUN-CWNMD", "a"),
("FUPNI-MELZA-HYPKR-QUIDS", "a"),
("IMCAJ-UTGIB-NKUWB-PZXAN", "a"),
("LWNZF-XGUAT-VDFHV-ZCDAW", "a"),
("FEPYF-MFUPX-WBABD-HHQIL", "a"),
("DSWXJ-HFKFQ-YHTHQ-EZKTG", "a"),
("GZKVP-CIMDA-QCNHK-UHVYJ", "a"),
("IQRBO-NMBVD-OTHFP-OONRI", "a"),
("HCZQT-BUIXB-COYDQ-JCUSD", "a"),
("BOLRH-GCRZG-DPZHU-ETZRS", "a"),
("GCQNE-DSQYU-HBEZZ-DTMAR", "a"),
("DSCWJ-TIAUA-BEZXX-EIUXE", "a"),
("HLCXD-YSYAY-JUINS-HFPYH", "a"),
("LBLTT-KCALT-XZIJP-OFDPS", "a"),
("IJLCR-VFBGC-XOPDV-FXHUB", "a"),
("CNIDT-EJLGH-GBFZO-KBAYW", "a"),
("JAOFR-NQRJF-DUZZN-ETJJJ", "a"),
("HOXEF-WTCQV-DVQKE-LCAWU", "a"),
("GZGUJ-BCZSC-FABLK-HIDLX", "a"),
("DVMHB-YXGCE-FUIAJ-PUGRQ", "a"),
("ECBXS-LHBTF-ILWCM-EVBQH", "a"),
("CBNRM-UUIAW-DALAA-QKDDK", "a"),
("CRNUW-VJIJM-ZAVBR-GYSCZ", "a"),
("HXUCJ-MLAQS-GJMWL-TSUBM", "a"),
("FQOOA-TYUXG-SSRYE-EYTVJ", "a"),
("EHBKJ-VNUNK-BSTPJ-MAYNG", "a"),
("EKXWP-YYOQH-GEVFF-GKDGB", "a"),
("FQWRH-LFDVT-EHCZP-RZFUG", "a"),
("MJSDZ-EUZCY-RSWJP-ZFMVR", "a"),
("EMIDQ-KUWUZ-WUJDS-IDJZW", "a"),
("IJPTZ-KWUXE-TMGIE-VERAJ", "a"),
("FGBUW-TTDIJ-OMEUB-XXBFQ", "a"),
("BUQHC-PVFXE-BMQOW-PGJET", "a"),
("HKCYE-ZOUBG-CBKKX-XLUUA", "a"),
("EMKNS-DGVFH-TJRII-UILDH", "a"),
("CMTQS-OHYVB-XMRUK-JPAVY", "a"),
("KBKGG-XCVME-ZJVPC-TXXSL", "a"),
("JIHDL-UPNMW-ZYULQ-ZWNMY", "a"),
("MPBQN-ZEXRW-TVURK-AYVQR", "a"),
("CPQMY-VDCUI-ADWGV-CJSLY", "a"),
("FBAHT-IQPAQ-HWERN-JNWSD", "a"),
("FPFNH-HYJAE-RFHJP-EXSEA", "a"),
("GILFI-CDGML-GYRTC-CELKZ", "a"),
("BTYLJ-UOJHB-XBOJM-LXYOW", "a"),
("LFXJU-WHXGL-VYTQM-ZKCAD", "a"),
("MYILZ-NODYG-NWDAH-QVZRG", "a"),
("MUPTW-BTIQQ-QJEBC-UKIJT", "a"),
("EXPSL-EQTOH-DZETK-QVGRU", "a"),
("IWZRM-PECDF-PLCZR-BWPYD", "a"),
("FESNC-CGGSH-AJTUD-XCAWU", "a"),
("CGVOE-RRTYC-YWISB-WZMIJ", "a"),
("CANWM-GUICK-QAQJM-MWQWG", "a"),
("BQWZX-YMXJZ-PEILZ-FKBFN", "a"),
("HNWVQ-ERWPX-OPBLR-KKPHS", "a"),
("DUFGF-KQRBF-QETNV-JAWJD", "a"),
("CTMEX-EHYQN-VAZAS-YCMCC", "a"),
("KLAXW-TCSML-PUQLJ-DDUBF", "a"),
("LFXVM-OJDCF-EABRG-FRBSI", "a"),
("JCHWU-DEYXP-ZVFZA-SESEJ", "a"),
("LHYNC-BOFGZ-CTGHM-ZUXRU", "a"),
("CXLJD-CCMVP-OKGOI-QOAHV", "a"),
("DZQHL-NRRHY-ASPYY-WPSCI", "a"),
("BKCFF-HKNPG-SZBNU-IWMZT", "a"),
("EYHAI-DFREX-BXMXV-AOHJI", "a"),
("GLZTW-FXBTB-CFKSK-MDFRZ", "a"),
("GSVFC-NOPGE-ISUTF-QIZDO", "a"),
("BISNP-ERIZM-MGBHC-MUGMR", "a"),
("IYWYZ-SIRDH-QUMFP-PJYGO", "a"),
("BJJVO-MPVPP-TWRBS-ZWTNF", "a"),
("JXLTD-TRVXK-ZMWUK-LQOKY", "a"),
("HNWBC-YMDIA-NPCJI-EPVQZ", "a"),
("LHWAD-RBOEC-ICUMA-HOOJE", "a"),
("HPHQF-XQIXU-CQFLS-LHZHF", "a"),
("FNFGR-XKVIF-LVRDV-UWAEQ", "a"),
("CURXU-SWIXU-MPMDA-UWCRX", "a"),
("DYIJQ-UKGSG-ZKXAF-BOIPE", "a"),
("KISBI-QGVRF-LMTYP-NDVXZ", "a"),
("DNBQC-FXVSV-ZBJLC-RABDK", "a"),
("EBKLH-VURZH-KXQPX-FHDFX", "a"),
("MIPFS-ZULDS-AOPXU-MBIMO", "a"),
("BMUHH-TMDSQ-VZGUD-XRGMH", "a"),
("DHNOD-LWNAP-FIXDZ-BHSYQ", "a"),
("JMXNU-GYQJU-IJNYK-ZNUIZ", "a"),
("BJWTJ-KHNFA-CNRGV-MGMKO", "a"),
("DHIZJ-RWJNA-NFDPI-TMDNF", "a"),
("MXDEO-SKLWX-XIIOC-KIYFS", "a"),
("GJYBK-VEECL-ZSTCI-DKGJT", "a"),
("FRLLI-IIYBF-EIFTB-JVONU", "a"),
("HQRLO-WUQRY-EQILN-PAQPB", "a"),
("GOBBJ-NXKUT-GMZGI-IWUII", "a"),
("JXUNK-OZYRU-EMZYD-IFPSB", "a"),
("MNACV-JTQJP-OWUER-IPIYS", "a"),
("FKYRL-PZDDX-LLJLZ-TSPLB", "a"),
("LHCIV-FJOJO-RSJAZ-EYXRG", "a"),
("CDWAE-IWBXL-JDORI-YWVTL", "a"),
("ELGGA-ROEJD-CCGDY-XGNBQ", "a"),
("MVGWC-ZILOX-BMQUU-TVWKL", "a"),
("DKQSQ-YOKLN-COEHQ-RWOXS", "a"),
("CXRIJ-NPFVH-VYZHI-MVUKF", "a"),
("DLENK-LPTNT-FQUKB-VLEXU", "a"),
("IHZUN-AUYZG-TOYAX-MUEID", "a"),
("EJQWY-SJQFL-RTFSJ-DZIWQ", "a"),
("JHAQR-CYTGZ-XNORM-ORGKB", "a"),
("JZXII-BJFFZ-RCANT-OUXHU", "a"),
("HBWSZ-UREQG-DQBMW-OKBNB", "a"),
("FNNGH-FSNXF-OAIQM-ODADC", "a"),
("DXIES-HWIKT-NMHKZ-GKRLX", "a"),
("GKZIW-MGVCE-FLXBA-VFBGS", "a"),
("HDRGU-CFUFC-LSQTA-SBXXR", "a"),
("MRPRN-LUSBH-IDZFW-RVBGU", "a"),
("ESBRE-LNJWV-RQKOK-DVDUB", "a"),
("IYFJQ-TDIYO-RKQJM-MOKPQ", "a"),
("IEHLW-IWJAI-RHGCD-LTYHR", "a"),
("DCHKT-WWHZX-OPQPR-PMNVK", "a"),
("EBMUO-KUSCM-XCWCM-TRFVD", "a"),
("KARUI-WBTDG-DNDLC-FXXUG", "a"),
("EGHZZ-PQMGI-PLJVW-JNPEX", "a"),
("CWABM-AQSFD-NJMAX-WKLDK", "a"),
("BXEXF-DLPGO-LGGYG-XXCBL", "a"),
("LQQFM-XHZFZ-VRNBW-RXZAK", "a"),
("MVJXO-RLVSM-WHGVA-MCQVF", "a"),
("ETKEM-JANPD-WTADC-CPGSU", "a"),
("FXUXC-EMHLF-SECUF-GPBHH", "a"),
("GAXTU-SFOIZ-WCSTM-CIHZU", "a"),
("BIWOE-TGRBU-UPPKU-PFOUD", "a"),
("CVTLD-SXNKW-EFRLK-DUQGQ", "a"),
("DNYTH-PRMPL-VXCLN-GQRKV", "a"),
("JQVJQ-VMUQP-LBIYQ-SQWAG", "a"),
("LELBH-VPOEX-IXTDH-XWLBZ", "a"),
("JXUVZ-EUKUV-MTEHV-NXPDO", "a"),
("GGPOS-AGSJL-XHYVP-SCFYN", "a"),
("GNYIF-VNCOF-YLXVF-PLUSW", "a"),
("BRVIN-VUJUB-IRCJS-ZIUQD", "a"),
("JGFDN-HOAPA-SHICP-ZIGWA", "a"),
("IHMIV-FCSEC-UCHYA-DFTQB", "a"),
("DDXSD-JHHXE-ZEHTX-GUYWK", "a"),
("CAISW-MOTOV-KUKMB-YNDVR", "a"),
("LYRRI-NXMCB-UTBCL-MIWRW", "a"),
("HKVOS-OZYQF-UKECQ-VZXIF", "a"),
("GLHXD-IHPNB-KYJEK-DJPDI", "a"),
("DGMEB-MOHWO-QESLK-DHDAX", "a"),
("JEGBC-SOGSA-WBPPD-AEXDC", "a"),
("EILSF-MAPNS-CMSVZ-VMIZT", "a"),
("HNPWW-TBWVI-KOAIW-WQUXI", "a"),
("GVSFO-UXUDH-BJYWZ-UQIHZ", "a"),
("JJHCW-MUGOQ-JZPMQ-SNZQE", "a"),
("MHSDW-CUQHA-QPZVY-IJGRX", "a"),
("GHTUM-BVMYA-GYYUZ-VCSAK", "a"),
("BWAMR-YOLLR-MFJQK-NULAX", "a"),
("ISFKB-FJBKF-XSJYE-BHEPW", "a"),
("DPHSO-VXFJM-PYONI-THBLL", "a"),
("EZHOH-DGCVZ-RSTDN-HQDZQ", "a"),
("CCQDU-PTEVZ-ETOAA-LAITZ", "a"),
("BXIUX-DXNLI-MKEFO-QZOEQ", "a"),
("EVQMM-LLGEO-ALWVP-WNZWR", "a"),
("EJGXG-TNBVC-WTYVY-JQYBQ", "a"),
("ECWNB-HLDEJ-WXVAC-ZHUBJ", "a"),
("GPISC-DBJRS-CBZMA-UEXRG", "a"),
("JZESQ-MRLCX-BJLQM-IKLHL", "a"),
("HZOOS-ZISAX-ZJAJK-FRGUG", "a"),
("HYJCX-JMLDP-JREEA-RFNBZ", "a"),
("ENYQC-MJZKZ-OADEC-KZQSE", "a"),
("HLNIO-RPWRM-XFLWC-BBYFH", "a"),
("KUCIU-AZWGY-ZLMCM-IAGZA", "a"),
("FSLOK-QHWXJ-AIMFE-BUVOT", "a"),
("KPDUJ-XAPQA-HRCKA-NVLRG", "a"),
("KSYBU-GHUQO-ORRFS-IXRNX", "a"),
("EVCNC-JBENM-NXJNA-PSKTQ", "a"),
("BRAEE-QLDWU-QWKHP-WDHJJ", "a"),
("CCPOH-GURQY-PNZWK-UMBIU", "a"),
("DPBVS-BCASA-IGXAO-FDDYF", "a"),
("MISDM-NSBDG-WPNYV-LORPA", "a"),
("JSAHL-KOCZZ-CQIWN-OUAMT", "a"),
("MPLYT-TNIGB-LKBJV-TZGZS", "a"),
("IJFOB-KPDHV-DBVUS-JIZXD", "a"),
("MAOPR-KOWUG-FEVVS-KRCIO", "a"),
("FZSIA-MGCOB-ZNXMV-PTIHR", "a"),
("BSZVW-CLKDN-BDFPF-RCBZC", "a"),
("CULGG-KCDGF-KYWCJ-OBQAJ", "a"),
("DXJCV-SFSAX-UGYMY-GKXWK", "a"),
("DGYWD-FFGWG-EKQDP-RCPSD", "a"),
("CYSFC-WNATM-ORDCR-USUYE", "a"),
("JDTCL-FPVJK-PTWBW-ANZNX", "a"),
("BKDBU-BWAQM-YOFPL-FFJYK", "a"),
("ELJTB-HAHPT-KXCQC-OLCDJ", "a"),
("GTNPO-IFCPU-XHGYI-YVNDO", "a"),
("MGACW-JQLNH-WJDMF-AKRSR", "a"),
("JIXXQ-FFXEU-WTQUU-GNQWW", "a"),
("HESTJ-EBMPQ-UUMQJ-MGCXN", "a"),
("KANVX-KDYLA-QVRUA-IGBNW", "a"),
("LKPVV-YRZJN-PRAET-ZUPIB", "a"),
("MLSGO-ZPJBY-YWPLD-ZFRBI", "a"),
("FVDHH-PIFAM-MZVFS-PPBFR", "a"),
("DCPVC-SHAFC-SPWUR-HPBYE", "a"),
("ECKAP-KHQDQ-NZIAG-ENGGF", "a"),
("HOHZA-MDMLR-YHALF-WEUWW", "a"),
("LZEHA-KZMWX-OJZNK-JOPQH", "a"),
("GAAUK-GCOIJ-ZCLEW-RPASI", "a"),
("DTZQZ-XBNZW-PZLIZ-YNPCN", "a"),
("HJDEC-HSNBA-HHVCD-ATQEG", "a"),
("HRSRC-UCPDC-TUDYW-ECDCX", "a"),
("KJGXX-BTLUE-JCHIO-JWWQQ", "a"),
("KOWVZ-JQJTY-PZBAX-ZYOSN", "a"),
("JTGUX-IWSCJ-AGKUR-SPCVI", "a"),
("JFFJY-DIHZP-KBCMQ-FUWFB", "a"),
("DGFXK-NSIKG-SYLBN-GAIGQ", "a"),
("IRWCI-CESFV-FQTHR-PFRKN", "a"),
("ETECS-QWYHV-FISGN-XJNRI", "a"),
("NAJQQ-BCYGP-ONPLX-OKRUT", "a"),
("EPVHU-TAWQT-LRPBW-DSNME", "a"),
("BOJZZ-UHRKL-GCXTX-ICGRP", "a"),
("GJYVE-GLGVD-VDZAL-RUDFU", "a"),
("GBBDK-KPQST-JSDTZ-CIKXV", "a"),
("IAPXO-DLIVC-MWKKW-CKFJG", "a"),
("JMSHH-LLUYD-NQYTN-UNYUF", "a"),
("JOAKG-SYMQH-ZUWKF-TMYKC", "a"),
("ITYWD-CWEJZ-VOHTJ-NQWHZ", "a"),
("LZYYO-NGPCS-MCHJZ-XIZAE", "a"),
("IPNND-JNEVB-COPFF-KFTLH", "a"),
("JWZDO-TDRDT-BJVMP-GHWBQ", "a"),
("LOTLG-JPHWX-BZVIC-FDUML", "a"),
("CKKVK-XOLCB-FCZSO-PNXVG", "a"),
("DESLH-XHLCE-PWWNQ-WKAJD", "a"),
("GVNKH-BIIOJ-HIBBW-DYVMC", "a"),
("GNCOI-BTLTQ-XCTYC-TJPQL", "a"),
("HIAAH-HRHCJ-ZPPHL-FLGQA", "a"),
("DVCSA-UPYKW-EDQSS-ODFDH", "a"),
("GPBEH-HWFAP-CQDFI-EGIAS", "a"),
("FHURW-GZCTA-VZKWS-CMGFJ", "a"),
("HRVZL-PZHCN-MTZQR-YMXSU", "a"),
("GBDKV-RQSMY-FTIEU-KBVSV", "a"),
("BRDLZ-RGVGC-CEACX-DTLZI", "a"),
("CCVCD-MZMKM-CMNRM-FKEYH", "a"),
("KCQWN-ZJGOZ-CNTHG-XQBPO", "a"),
("IAVAZ-PHHKD-QSPLC-CQBNT", "a"),
("MTMZB-AIRYY-KWTKA-TVCSW", "a"),
("KMDVM-HVROV-BOMYC-ERBIP", "a"),
("CLJYE-QNSUH-VCJKA-DSTJW", "a"),
("LHKBL-AAJAS-DQHUQ-DEKEN", "a"),
("DCUCX-ZZFHM-HDLVF-CDOWC", "a"),
("IGEIE-BOSAX-WXCOW-LGTBJ", "a"),
("IIGZG-BLJKM-SKPBQ-HBQUQ", "a"),
("IOOPE-UBTIP-AJPAE-YQRWR", "a"),
("LHFCF-KTBTK-IMBYA-UIJXY", "a"),
("DKHXJ-ZLGTM-NTQIT-RBPTR", "a"),
("DUBJV-IXIKN-WNDOT-FWQNC", "a"),
("FKIIP-XBARH-STKCH-XVDBX", "a"),
("EIDCG-BASZU-YYJBX-JPTOW", "a"),
("BIVMD-ANZDU-VHAUQ-PTBBR", "a"),
("MCHXG-JBFCJ-VAUBY-TSOJW", "a"),
("JHFXA-UGIGS-JMGNX-MWPRT", "a"),
("DUTAM-SAEOM-QCUVQ-IBLRM", "a"),
("MLVVH-DQODI-UIGUS-SSCRJ", "a"),
("LBGZF-JOJQU-BDWLJ-IOJNW", "a"),
("IAZKM-GAOYK-HUWES-LTKEF", "a"),
("EGDLG-FOPYE-PHDJB-FFDDM", "a"),
("KFPNP-HCBIU-IOOXX-OJKTB", "a"),
("LXTFJ-NJDIQ-GITND-NHEGM", "a"),
("HDODD-DTKRB-WWVQH-GCVCJ", "a"),
("LHGTQ-VJBUL-UYBHZ-YNYJQ", "a"),
("FRJFD-IKUAZ-QTNIV-PATYX", "a"),
("LUPQU-XUTQK-UQUTN-ROLUQ", "a"),
("EXFJA-ZHLYT-ANDPI-YMRHL", "a"),
("ENAKN-VMPJL-BDPUQ-XQXUS", "a"),
("BTMVH-TVXHV-GNHFE-TLHLF", "a"),
("JKNMV-EFAZN-NNOPS-BXLAU", "a"),
("EDRPM-RYJQT-LALME-CZOHT", "a"),
("EGPDY-FDASG-KQRFY-WRRBE", "a"),
("DKCAD-SOMLI-CGMRL-NKJAH", "a"),
("EOCLV-LKIEM-KLVGL-QRAWI", "a"),
("CYHJF-FHMXU-LTPAT-OBROV", "a"),
("HBPTQ-SIXIC-WQXQL-JWXVQ", "a"),
("KVSNP-VKOOV-QQEAR-BTOLR", "a"),
("EFNVH-NQQFB-JFYYS-XCKIY", "a"),
("CFIOZ-YEOEK-SSRYJ-VCEAB", "a"),
("BMQFY-KNWFQ-BYRCQ-OPZZM", "a"),
("BPMCO-XOGTU-DVNTN-ELKUL", "a"),
("KWKZI-KHFSI-CUMXM-PWKWQ", "a"),
("ELEJC-QQGDU-UHSIR-LHPIB", "a"),
("FIGWZ-EFSHT-QKQMQ-DAUNE", "a"),
("MMWGS-JEZPI-JUSVB-XWYLZ", "a"),
("BVJDE-OLBZU-QVICF-QBAUI", "a"),
("CVZWO-JTYQL-JFINE-YBCVH", "a"),
("LUDKJ-TYLLF-IUGXS-XKKJI", "a"),
("HLLCB-ADHGI-IPBUU-BOOBJ", "a"),
("IFSVU-TBBNH-BSIVZ-NAHLS", "a"),
("CJCML-HLVZH-GCUIA-DMIBT", "a"),
("ILHHG-HKBTW-JRTBZ-ECQBU", "a"),
("CMPRT-FFUSO-COMOJ-ALCRF", "a"),
("DMWOW-AQNEO-SZUPO-NBYKE", "a"),
("IQAGL-KLXLD-CNXAO-XHOUZ", "a"),
("BRFOA-RPGJH-XLTYT-UDWQS", "a"),
("HMPCV-FMIMR-IWJHN-OZPUX", "a"),
("JYRPF-GDLRH-GRPEY-OGVZW", "a"),
("ETLCH-VRTVB-UOOPL-OTTMJ", "a"),
("HLUFG-LPUWW-XVBMW-FRKCS", "a"),
("EAGYB-NGCHC-ZRZZF-NQJOH", "a"),
("HGZRQ-DUITG-YIPEO-RZKMQ", "a"),
("HPOOL-GYSXC-UROMO-JWBAF", "a"),
("GLTXP-GITLE-HNMYO-EQFHA", "a"),
("DHZKI-RAAPB-BHLYC-MGJVV", "a"),
("MPKFB-JUWZC-OSUZJ-VNLQI", "a"),
("KOJGY-UWDMU-HFXZG-DCIMV", "a"),
("EZHMW-MGHPM-GJVTX-JMSIG", "a"),
("HVZZR-GUCNL-FXFGO-WHMKD", "a"),
("JAREZ-JOSLK-KFUCW-ZQJXG", "a"),
("HDECL-FTZLZ-MGPZQ-LKLXP", "a"),
("GZIRQ-HIGRS-RYFGV-TUYQC", "a"),
("HXUOA-LJECJ-FGPLJ-DHTGD", "a"),
("CNWVW-FFAQP-FAMWQ-SAFGE", "a"),
("GRBNF-BSMNB-QYILM-KIUOZ", "a"),
("KZABS-MQSQX-ODEXJ-GZWVU", "a"),
("MVKQA-RFLMQ-LUZXA-NUYIX", "a"),
("MCRSX-HLGXJ-OEEYE-XDFXG", "a"),
("COPOZ-AJZCS-GUKDZ-IYGTT", "a"),
("ILUJD-TCKMD-MRFQL-DHPHA", "a"),
("CHOYK-WKRVT-SZLFZ-HZKIL", "a"),
("HTQWT-KTVJU-NWGGA-DTZMY", "a"),
("JQBEO-FWFXW-QCQZH-HYGSB", "a"),
("LZFDT-DOIPD-XFHWN-JEFJQ", "a"),
("JYIMS-MZHAJ-MJTBF-WWUTR", "a"),
("FYOTN-UPBJT-XEKIT-VZYYY", "a"),
("ECHMS-ENQAF-FWOSJ-UURUV", "a"),
("IEBIK-NMPWL-XHLUW-LYNYO", "a"),
("JIBUO-PIVCC-CFIEN-SIISP", "a"),
("HLRKN-FVQXP-YKDUD-EPZAI", "a"),
("BUSOE-CDXNU-MXJPG-XGZLD", "a"),
("FEWKQ-QTVZO-TIQBB-BZGXA", "a"),
("BKYSM-TLLSD-NDWWG-UKCLR", "a"),
("CDNVD-XRHQM-DSGDJ-AHXSA", "a"),
("KTTJH-RQSFF-JMIRQ-QPUQB", "a"),
("IIMWH-VNHZD-WRJJX-PYTFM", "a"),
("BKEWM-SFVMI-QMZGT-TBXAX", "a"),
("MCQEN-YNYDR-FKTRD-LOQRS", "a"),
("GPQXM-LBADD-BNLHG-HHYLH", "a"),
("IQCEI-FDLMN-EUUWW-LHXCW", "a"),
("IKYHW-HLZXD-XMZIC-NQHTV", "a"),
("IXMNG-UGSBH-INXAV-EGTPO", "a"),
("KEFQJ-WTCXK-YQWDB-CZTOR", "a"),
("BJRSO-NFRZY-EFWKG-JLXHY", "a"),
("KGAMW-VFUVC-VSTNJ-NFZAX", "a"),
("DYZFP-PPMRF-MQJPC-BRJAY", "a"),
("HKZYY-AZAOA-BGUOV-PUKOR", "a"),
("HTUOY-VLOGW-WNGEV-IIZGW", "a"),
("CIZKE-UEHNA-ALHHM-NZCXB", "a"),
("LVPBR-SFNJD-NSRTM-DNLKQ", "a"),
("IIKTV-JYWQW-MQDKA-DPQMZ", "a"),
("HPCJR-MTAGS-YHZAZ-FSDEG", "a"),
("DCRMO-JJUIT-RKICA-BRYFB", "a"),
("EWSPI-QZQHX-ETMES-FEPRW", "a"),
("JHAEG-LSCIE-QEVTH-ANOYN", "a"),
("IQRTG-CZWOS-BSHGK-LLXRA", "a"),
("LOYTJ-PPCWU-QTYMB-KMCCD", "a"),
("LEDGY-EUPOZ-MYJAI-MBQEQ", "a"),
("IHQOS-MSEVQ-TECFS-FQREF", "a"),
("KIOZL-JPCRL-GYANW-WTTGC", "a"),
("KFQOZ-SKTZO-LRSPN-KFCZJ", "a"),
("KUQCG-EYCZA-TGQPI-OQETG", "a"),
("CABTK-CKSNL-FXSZZ-AZGYV", "a"),
("GVKFP-CZNTW-CZWLE-TIYPQ", "a"),
("JIYDE-UAUMB-YSAJI-PJQMX", "a"),
("LTABL-YRQLN-JJGQR-DJNGA", "a"),
("DCLDE-LACCX-FGQQU-JJUIR", "a"),
("JYZNP-VTLJA-JMUGG-BKRSS", "a"),
("BTEQZ-SVNUC-CIDUJ-DPFMX", "a"),
("BVKRD-OOEPB-TJCJW-EPTXS", "a"),
("JBGQL-YGTNY-LSFEW-JIOQF", "a"),
("CXDAH-URTKG-YOLAG-BDLDM", "a"),
("FWUKP-IZGIN-LOMTB-OZQHR", "a"),
("GRTNV-UFJBP-FZTQH-BPDJS", "a"),
("JZHGP-BMZWP-AOYNS-CZUIJ", "a"),
("HOGQV-NLYWX-VMAFM-MTEVI", "a"),
("EKGZY-SEGMU-EFHOD-OIFOT", "a"),
("MYBCA-GIYWM-JNNEI-CKZEY", "a"),
("CLDMR-VJPEW-AHRFA-VWGXH", "a"),
("BZCVS-FDUKQ-MSHWF-DQXLM", "a"),
("IPQAG-PYNYI-BPDPT-NMSNN", "a"),
("MBVBI-YIOTN-IONZE-SJYAQ", "a"),
("IEVAE-HITED-TTSHW-QWRSR", "a"),
("CEHVR-LBBPS-XYANZ-WYYXE", "a"),
("BUQJY-LFJVX-KRMKR-BHLIX", "a"),
("HITEB-PJUKE-BAKXE-HEQBS", "a"),
("KQDHC-ALLXM-GJCGS-ZEKNT", "a"),
("JABQJ-ZDVUU-FZVXC-KAFXU", "a"),
("KNELU-AQNVO-QCDMU-BCCKT", "a"),
("LHHPQ-DALKA-ASSLK-PVWJG", "a"),
("IRYDM-FQTOA-RUVAM-ZROAR", "a"),
("JSUCV-URYVS-MOJCA-GDYUC", "a"),
("BJNPO-JSWEQ-ZUYVP-AZTFN", "a"),
("IHWFI-QBIXP-OMPTR-ASCHW", "a"),
("EBWWJ-ZRASX-GOGFB-MVNUB", "a"),
("DHURX-SZVCS-DSOKQ-GIPUC", "a"),
("HWFWH-WAZND-MJRUJ-YLAJF", "a"),
("HOFVA-FVMPG-IMBCA-MXRAM", "a"),
("FKJIT-GRMHC-MQNPV-PFXYF", "a"),
("MNZLH-LDDZS-ARNGD-RRXJM", "a"),
("KCJRP-PTMPX-SAWMI-MLYYD", "a"),
("KSCFC-ZAJVR-QGVGL-XYKWY", "a"),
("GMSIL-HMMED-SFDPR-TUIEV", "a"),
("ERAKX-NVXYC-ILUHI-VIFCW", "a"),
("IEUSD-YYZXD-CSQGJ-SPTPF", "a"),
("GTTMN-IQVLG-IPKWI-UPXEU", "a"),
("EQONH-GOHXL-BEUYP-TCCQJ", "a"),
("GARWM-USKVX-UNBYM-VJTEG", "a"),
("HERLE-CVGNN-ZYFGI-BZPRF", "a"),
("EPPVT-QSBJJ-XJMSZ-VDYKI", "a"),
("FEBLO-ZQIUS-FJJRB-XSLBP", "a"),
("JWTXV-OBUEN-NZFVB-OHGLI", "a"),
("HZDDI-DCVTZ-ISZDH-CIKEH", "a"),
("METGX-VWCLG-WXOKR-JJYSM", "a"),
("FWNZE-CQCGS-EOCSP-LVZYN", "a"),
("IYJVA-AKTUK-GPAMC-QNZUG", "a"),
("DXOVY-MWBUK-BHKJW-BLNCL", "a"),
("FLWEB-MOQRE-DVOSX-TXTPC", "a"),
("BIGMR-HAUKS-YIGOI-ODCCJ", "a"),
("IOYRT-YKWEW-WQOKJ-FWBXE", "a"),
("HENXL-GIWRE-RHMYK-DIWAX", "a"),
("HRGBS-OGDTX-GULVF-SHUEQ", "a"),
("KEGYZ-SBEIC-GKONG-MGJOB", "a"),
("ENPAU-XWCYK-YRQLS-TGTPQ", "a"),
("HJDVW-VZRPJ-DPFFK-SHPFN", "a"),
("CMKTE-FPDAF-CJGYM-RNFPS", "a"),
("GOLYX-BCJYF-HNAEN-EZQIN", "a"),
("MZBEK-NNQIP-HYVCS-TXMQO", "a"),
("NAGOS-EDRTQ-AWGLV-QPRMT", "a"),
("GUUNF-CMRWE-XKUJR-GFBHG", "a"),
("KQOBL-XBAZR-RSIJG-ZEVMN", "a"),
("GMMAC-UOLOD-AZLVC-KIGBY", "a"),
("EAJTT-AYXJW-DYRIZ-ODBDB", "a"),
("JYBFH-VBPTI-LBFKR-AWQPW", "a"),
("KCLOJ-UYLEP-TNMYW-BZSLP", "a"),
("HXTTY-QTSHL-QQGYP-VBJIC", "a"),
("HKKKL-TCQBM-IMZAK-TLAHR", "a"),
("MXZCZ-CQILC-DJMTP-SGQOU", "a"),
("EQHWJ-DXUGX-QFFDJ-UWUPL", "a"),
("COPIJ-ZILKJ-OHFPL-QNJFE", "a"),
("FGCMM-NPXTZ-KTSRL-EAOPV", "a"),
("FQIAZ-VTILJ-LMYAH-UXQJS", "a"),
("MEPHA-ECAQB-HDONH-WLVMR", "a"),
("MLDXS-GKKKV-PELOQ-LTJKG", "a"),
("GZHYG-QTZHT-AKRKD-AJPFR", "a"),
("ENDOW-WUELN-DSLZV-BMYHS", "a"),
("GROCZ-NSTVZ-CNJMC-OXCTL", "a"),
("DQAQW-WVXIF-NQSJM-LTNRE", "a"),
("BZUDR-EIBJE-XNAWW-DGZZN", "a"),
("CBBVV-YQCYM-AQDZF-ABCBS", "a"),
("IOXFP-SEVNX-TLUYU-TXIUN", "a"),
("DZNSR-MAOOL-HVHBT-TWYNM", "a"),
("FJIOU-GINCS-WDUFC-WQZFZ", "a"),
("IRGEI-IFTSA-LKDOH-GLCHK", "a"),
("KFYUF-IKRWZ-RQJKO-EKCLL", "a"),
("LRKGP-LZSVI-ORNKJ-VPPZU", "a"),
("FYPSB-GIKYW-TIMJO-FDKNB", "a"),
("MMNYX-LCESB-GLEFE-EZKVS", "a"),
("GMLBA-CAEBR-LJFLK-WCCZD", "a"),
("HDSHG-DKDQA-BPDXT-TNBFI", "a"),
("HQYRY-LJWQX-TJJIC-OKRTF", "a"),
("FMQFE-LRUJE-DXUZD-ZFOUQ", "a"),
("JATSJ-GKOAU-LIDTV-SBEWV", "a"),
("GMFRT-EDLGA-EOJFO-TNJAO", "a"),
("CWIVC-EEVKZ-VKUIA-ORMNB", "a"),
("HQMNX-VTRSS-JUIRV-JAWTW", "a"),
("GGFAB-JMAFH-MONLV-JHEJL", "a"),
("IDMDW-HVZID-NBWUO-RBIYG", "a"),
("MLHFY-CCGCJ-OVJSV-DWXPN", "a"),
("JDINL-AJHSF-ZCKAR-PQEOE", "a"),
("JIOQK-MXCKM-POCTV-DSYIB", "a"),
("JYXOQ-VPIDG-ILBTH-POZDA", "a"),
("HMCSV-FGSXL-QWDWV-UOGGP", "a"),
("FHVWM-GKAUS-BMDBP-NMMPO", "a"),
("KUFMM-EXRCJ-FKCGO-QLNMR", "a"),
("FFDKJ-SALEH-MSTKH-DGBTE", "a"),
("BVMGJ-NPBZA-TAMXG-LEDDN", "a"),
("EUGJT-MFCKG-LTPBA-SNZQM", "a"),
("BUPXA-MDBBH-YANMM-ILQUZ", "a"),
("BLDWH-EAJMS-HYMVX-FOSEK", "a"),
("DALDW-FXBBO-PJGJW-ZREID", "a"),
("FZVCV-ZXPPS-EWXVH-TFUQU", "a"),
("LDYIM-BHILI-RGHNW-LOTPL", "a"),
("GSOVA-KCQZV-GWFOK-WTVPM", "a"),
("HCQPK-MEEOZ-JCNCJ-QRNTV", "a"),
("EYNTM-NXRBA-ZEWOI-BVXAM", "a"),
("FHKKI-USKHP-DMLOY-NBTEV", "a"),
("CZSDY-LOETJ-VMQVN-ERWWG", "a"),
("ENOQY-VPDLC-HIZTW-DIPKT", "a"),
("IOAGC-SOBFR-PMDDP-CDHJG", "a"),
("LOMTB-TGAWN-EFCYP-NXBCF", "a"),
("FWEAJ-SSRQW-ERLQD-XDWWK", "a"),
("JOZWR-BJYMK-FARXL-YTJWP", "a"),
("FQSYZ-KNSPN-BQFFQ-DRXWY", "a"),
("JNKEY-YIMEG-DFBYQ-YRDUN", "a"),
("FUUPZ-RBFQH-RMLGV-HEISG", "a"),
("JDLRE-WTOWQ-LONFQ-QXBQP", "a"),
("JVXOW-NJMOQ-TEZXJ-WTYAU", "a"),
("NAJGK-RSVUA-GMOKF-DPINT", "a"),
("JFIFF-YDCLF-PLAGY-TYWQG", "a"),
("GZSRB-BVQWK-ORYIJ-YDKGT", "a"),
("BYXUK-ZVQLX-PFDPP-FIIIQ", "a"),
("HXCPX-GIGNI-MCBZI-XZSKN", "a"),
("FQVCC-HWNBT-GDCMS-HPHBU", "a"),
]

#activations = random.sample(activations, 1)


def activate(key_string, machine_code):
  args = urllib.parse.urlencode({"token": token, "ProductId": product_id, "Key": key_string, "Sign": True, "MachineCode": machine_code, "FieldsToReturn": 0, "SignMethod": 1, "v": 1})
  args = args.encode()

  with urllib.request.urlopen("https://app.cryptolens.io/api/Key/Activate", data=args) as f:
    response = f.readline()

  j = json.loads(response.decode('utf-8'))
  license_key_string = base64.b64decode(j["licenseKey"])
  license_key = json.loads(license_key_string.decode('utf-8'))

  return license_key, response

def _str_lit(s):
  if s is None:
    return None

  return "\"" + str(s).replace("\\", "\\\\").replace("\"", "\\\"").replace("\n", "\\n") + "\""

ActivationData = collections.namedtuple("ActivationData", ["mid", "ip", "time"])
Customer = collections.namedtuple("Customer", ["id", "name", "email", "company_name", "created"])
DataObject = collections.namedtuple("DataObject", ["id", "name", "string_value", "int_value"])

def _simple_optional(cpp_method, real_value):
  if real_value is None:
    return """  EXPECT_FALSE(license_key->{m}());\n""".format(m=cpp_method)
  else:
    return "".join(map(lambda s: s.format(m=cpp_method, v=real_value), [
      """  EXPECT_TRUE(license_key->{m}());\n""",
      """  if (license_key->{m}()) {{ """, "EXPECT_EQ(*(license_key->{m}()), {v});""", """ }}\n""",
    ]))

class BaseKeyTest(object):
  def __init__(self, license_key, test_name, *args, **kwargs):
    k = license_key

    self.test_name = "Key" + test_name

    self.product_id = str(k["ProductId"])
    self.created = str(k["Created"])
    self.expires = str(k["Expires"])
    self.period = str(k["Period"])
    self.block = "true" if k["Block"] else "false"
    self.trial_activation = "true" if k["TrialActivation"] else "false"
    self.sign_date = str(k["SignDate"])
    self.f1 = "true" if k["F1"] else "false"
    self.f2 = "true" if k["F2"] else "false"
    self.f3 = "true" if k["F3"] else "false"
    self.f4 = "true" if k["F4"] else "false"
    self.f5 = "true" if k["F5"] else "false"
    self.f6 = "true" if k["F6"] else "false"
    self.f7 = "true" if k["F7"] else "false"
    self.f8 = "true" if k["F8"] else "false"

    self.id = str(k.get("ID", 0))
    self.key = _str_lit(k.get("Key"))
    self.notes = _str_lit(k.get("Notes"))
    self.global_id = str(k.get("GlobalId", 0))
    self.maxnoofmachines = str(k.get("MaxNoOfMachines", 0))
    self.allowed_machines = _str_lit(k.get("AllowedMachines"))

    if k["ActivatedMachines"] is None:
      self.activated_machines = None
    else:
      self.activated_machines = [
        ActivationData(_str_lit(a["Mid"]), _str_lit(a["IP"]), str(a["Time"]))
        for a in k["ActivatedMachines"]
      ]

    if k["Customer"] is None:
      self.customer = None
    else:
      c = k["Customer"]
      self.customer = Customer(
        str(c["Id"] or 0),
        _str_lit(c["Name"] or ""),
        _str_lit(c["Email"] or ""),
        _str_lit(c["CompanyName"] or ""),
        str(c["Created"] or 0)
      )

    if k["DataObjects"] is None:
      self.data_objects = None
    else:
      self.data_objects = [
        DataObject(
          str(d["Id"] or 0),
          _str_lit(d["Name"] or ""),
          _str_lit(d["StringValue"] or ""),
          str(d["IntValue"] or 0)
        )
        for d in k["DataObjects"]
      ]

  def _activated_machines(self):
    if self.activated_machines is None:
      return """  EXPECT_FALSE(license_key->get_activated_machines());\n"""
    else:
      l = []
      l.append("""  ASSERT_TRUE(license_key->get_activated_machines());\n""")
      l.append("""\n""")
      l.append("""  std::vector<cryptolens::ActivationData> expected;\n""")
      for activation_data in self.activated_machines:
        l.append("""  expected.push_back(cryptolens::ActivationData({v.mid}, {v.ip}, {v.time}));\n""".format(v=activation_data))
      l.append("""\n""")
      l.append("""  // XXX: We have quadratic performance here. Could be some concern here given that set of activated machines can be large\n""")
      l.append("""  auto const& activated_machines = *(license_key->get_activated_machines());\n""")
      l.append("""  for (auto i = activated_machines.cbegin(); i != activated_machines.cend(); ++i) {\n""")
      l.append("""    ASSERT_NE(expected.size(), 0);\n""")
      l.append("""    for (auto j = expected.begin(); j != expected.end(); ++j) {\n""")
      l.append("""      if (i->get_mid() == j->get_mid() && i->get_ip() == j->get_ip() && i->get_time() == j->get_time()) {\n""")
      l.append("""        expected.erase(j);\n""")
      l.append("""        break;\n""")
      l.append("""      }\n""")
      l.append("""    }\n""")
      l.append("""  }\n""")
      l.append("""  ASSERT_EQ(expected.size(), 0);\n""")
      return "".join(l)

  def _customer(self):
    if self.customer is None:
      return """  EXPECT_FALSE(license_key->get_customer());\n"""
    else:
      return "".join([
        """  EXPECT_TRUE(license_key->get_customer());\n""",
        """  if (license_key->get_customer()) {\n""",
        """    auto const& customer = *(license_key->get_customer());\n"""
        """    EXPECT_EQ(customer.get_id(), {v});\n""".format(v=self.customer.id),
        """    EXPECT_EQ(customer.get_name(), {v});\n""".format(v=self.customer.name),
        """    EXPECT_EQ(customer.get_email(), {v});\n""".format(v=self.customer.email),
        """    EXPECT_EQ(customer.get_company_name(), {v});\n""".format(v=self.customer.company_name),
        """    EXPECT_EQ(customer.get_created(), {v});\n""".format(v=self.customer.created),
        """  }\n""",
      ])

  def _data_objects(self):
    if self.data_objects is None:
      return """  EXPECT_FALSE(license_key->get_data_objects());\n"""
    else:
      l = []
      l.append("""  ASSERT_TRUE(license_key->get_data_objects());\n""")
      l.append("""\n""")
      l.append("""  std::vector<cryptolens::DataObject> expected;\n""")
      for data_object in self.data_objects:
        l.append("""  expected.push_back(cryptolens::DataObject({v.id}, {v.name}, {v.string_value}, {v.int_value}));\n""".format(v=data_object))
      l.append("""\n""")
      l.append("""  // XXX: We have quadratic performance here. It's fine given current restrictions on data objects\n""")
      l.append("""  auto const& data_objects = *(license_key->get_data_objects());\n""")
      l.append("""  for (auto i = data_objects.cbegin(); i != data_objects.cend(); ++i) {\n""")
      l.append("""    ASSERT_NE(expected.size(), 0);\n""")
      l.append("""    for (auto j = expected.begin(); j != expected.end(); ++j) {\n""")
      l.append("""      if (i->get_id() == j->get_id() && i->get_name() == j->get_name() && i->get_string_value() == j->get_string_value() && i->get_int_value() == j->get_int_value()) {\n""")
      l.append("""        expected.erase(j);\n""")
      l.append("""        break;\n""")
      l.append("""      }\n""")
      l.append("""    }\n""")
      l.append("""  }\n""")
      l.append("""  ASSERT_EQ(expected.size(), 0);\n""")
      return "".join(l)


  def to_string(self):
    return "".join([
      """class {test_name} : public ::testing::Test {{\n""".format(test_name=self.test_name),
      """protected:\n""",
           self.set_up_test_case(),
      """\n""",
      """  static void TearDownTestCase() {\n""",
      """    license_key_ = cryptolens::nullopt;\n""",
      """  }\n""",
      """\n""",
      """  {test_name}() : ::testing::Test(), license_key(license_key_) {{}}\n""".format(test_name=self.test_name),
      """\n""",
      """  static cryptolens::optional<cryptolens::LicenseKey> license_key_;\n""",
      """  cryptolens::optional<cryptolens::LicenseKey> const& license_key;\n""",
      """};\n""",
      """\n""",
      """cryptolens::optional<cryptolens::LicenseKey> {test_name}::license_key_;\n""".format(test_name=self.test_name),
      """\n""",
      """TEST_F({test_name}, MandatoryProperties) {{\n""".format(test_name=self.test_name),
      """  EXPECT_EQ(license_key->get_product_id(), {e.product_id});\n""".format(e=self),
      """  EXPECT_EQ(license_key->get_created(), {e.created});\n""".format(e=self),
      """  EXPECT_EQ(license_key->get_expires(), {e.expires});\n""".format(e=self),
      """  EXPECT_EQ(license_key->get_period(), {e.period});\n""".format(e=self),
      """  EXPECT_EQ(license_key->get_block(), {e.block});\n""".format(e=self),
      """  EXPECT_EQ(license_key->get_trial_activation(), {e.trial_activation});\n""".format(e=self),
#     Sign date changes for each request, thus skipping it here:
#      """  EXPECT_EQ(license_key->get_sign_date(), {e.sign_date});\n""".format(e=self),
      """  EXPECT_EQ(license_key->get_f1(), {e.f1});\n""".format(e=self),
      """  EXPECT_EQ(license_key->get_f2(), {e.f2});\n""".format(e=self),
      """  EXPECT_EQ(license_key->get_f3(), {e.f3});\n""".format(e=self),
      """  EXPECT_EQ(license_key->get_f4(), {e.f4});\n""".format(e=self),
      """  EXPECT_EQ(license_key->get_f5(), {e.f5});\n""".format(e=self),
      """  EXPECT_EQ(license_key->get_f6(), {e.f6});\n""".format(e=self),
      """  EXPECT_EQ(license_key->get_f7(), {e.f7});\n""".format(e=self),
      """  EXPECT_EQ(license_key->get_f8(), {e.f8});\n""".format(e=self),
      """}\n""",
      """\n""",
      """TEST_F({test_name}, SimpleOptionalProperties) {{\n""".format(test_name=self.test_name),
           _simple_optional("get_id", self.id),
      """\n""",
           _simple_optional("get_key", self.key),
      """\n""",
           _simple_optional("get_notes", self.notes),
      """\n""",
           _simple_optional("get_global_id", self.global_id),
      """\n""",
           _simple_optional("get_maxnoofmachines", self.maxnoofmachines),
      """\n""",
           _simple_optional("get_allowed_machines", self.allowed_machines),
      """\n""",
           _simple_optional("get_global_id", self.global_id),
      """}\n""",
      """\n""",
      """TEST_F({test_name}, ActivatedMachines) {{\n""".format(test_name=self.test_name),
           self._activated_machines(),
      """}\n""",
      """\n""",
      """TEST_F({test_name}, Customer) {{\n""".format(test_name=self.test_name),
           self._customer(),
      """}\n""",
      """\n""",
      """TEST_F({test_name}, DataObjects) {{\n""".format(test_name=self.test_name),
           self._data_objects(),
      """}\n""",
    ])

class V20190401_Online_KeyTest(BaseKeyTest):
  def __init__(self, *args, **kwargs):
    super(V20190401_Online_KeyTest, self).__init__(*args, **kwargs)
    self.test_name = "v20190401_online_" + self.test_name

  def set_up_test_case(self):
    return "".join([
      """  static void SetUpTestCase() {\n""",
      """    cryptolens::Error e;\n""",
      """    Cryptolens cryptolens_handle(e);\n""",
      """    cryptolens_handle.signature_verifier.set_modulus_base64(e, "khbyu3/vAEBHi339fTuo2nUaQgSTBj0jvpt5xnLTTF35FLkGI+5Z3wiKfnvQiCLf+5s4r8JB/Uic/i6/iNjPMILlFeE0N6XZ+2pkgwRkfMOcx6eoewypTPUoPpzuAINJxJRpHym3V6ZJZ1UfYvzRcQBD/lBeAYrvhpCwukQMkGushKsOS6U+d+2C9ZNeP+U+uwuv/xu8YBCBAgGb8YdNojcGzM4SbCtwvJ0fuOfmCWZvUoiumfE4x7rAhp1pa9OEbUe0a5HL+1v7+JLBgkNZ7Z2biiHaM6za7GjHCXU8rojatEQER+MpgDuQV3ZPx8RKRdiJgPnz9ApBHFYDHLDzDw==");\n""",
      """    cryptolens_handle.signature_verifier.set_exponent_base64(e, "AQAB");\n""",
      """    cryptolens_handle.machine_code_computer.set_machine_code(e, "{machine_code}");\n""".format(machine_code=machine_code),
      """\n""",
      """    license_key_ = cryptolens_handle.activate(e, "{token}", {product_id}, "{key_string}");\n""".format(key_string=key_string, token=token, product_id=product_id),
      """\n""",
      """    ASSERT_TRUE(license_key_);\n""",
      """    ASSERT_FALSE(e);\n""",
      """  }\n""",
    ])

class V20190401_OfflineCompact_KeyTest(BaseKeyTest):
  def __init__(self, response=None, *args, **kwargs):
    super(V20190401_OfflineCompact_KeyTest, self).__init__(response=response, *args, **kwargs)
    self.test_name = "v20190401_offline_compact_" + self.test_name
    self.response = response

  def set_up_test_case(self):
    j = json.loads(self.response)
    return "".join([
      """  static void SetUpTestCase() {\n""",
      """    cryptolens::Error e;\n""",
      """    Cryptolens cryptolens_handle(e);\n""",
      """    cryptolens_handle.signature_verifier.set_modulus_base64(e, "khbyu3/vAEBHi339fTuo2nUaQgSTBj0jvpt5xnLTTF35FLkGI+5Z3wiKfnvQiCLf+5s4r8JB/Uic/i6/iNjPMILlFeE0N6XZ+2pkgwRkfMOcx6eoewypTPUoPpzuAINJxJRpHym3V6ZJZ1UfYvzRcQBD/lBeAYrvhpCwukQMkGushKsOS6U+d+2C9ZNeP+U+uwuv/xu8YBCBAgGb8YdNojcGzM4SbCtwvJ0fuOfmCWZvUoiumfE4x7rAhp1pa9OEbUe0a5HL+1v7+JLBgkNZ7Z2biiHaM6za7GjHCXU8rojatEQER+MpgDuQV3ZPx8RKRdiJgPnz9ApBHFYDHLDzDw==");\n""",
      """    cryptolens_handle.signature_verifier.set_exponent_base64(e, "AQAB");\n""",
      """    cryptolens_handle.machine_code_computer.set_machine_code(e, "{machine_code}");\n""".format(machine_code=machine_code),
      """\n""",
      """    std::string saved_response("v20180502-");\n"""
      """    saved_response += {license_key_base64};\n""".format(license_key_base64=_str_lit(j["licenseKey"])),
      """    saved_response += "-";\n"""
      """    saved_response += {signature};\n""".format(signature=_str_lit(j["signature"])),
      """\n""",
      """    license_key_ = cryptolens_handle.make_license_key(e, saved_response);\n""".format(key_string=key_string),
      """\n""",
      """    ASSERT_TRUE(license_key_);\n""",
      """    ASSERT_FALSE(e);\n""",
      """  }\n""",
    ])

class V20190401_OfflineJson_KeyTest(BaseKeyTest):
  def __init__(self, response=None, *args, **kwargs):
    super(V20190401_OfflineJson_KeyTest, self).__init__(response=response, *args, **kwargs)
    self.test_name = "v20190401_offline_json_" + self.test_name
    self.response = response

  def set_up_test_case(self):
    return "".join([
      """  static void SetUpTestCase() {\n""",
      """    cryptolens::Error e;\n""",
      """    Cryptolens cryptolens_handle(e);\n""",
      """    cryptolens_handle.signature_verifier.set_modulus_base64(e, "khbyu3/vAEBHi339fTuo2nUaQgSTBj0jvpt5xnLTTF35FLkGI+5Z3wiKfnvQiCLf+5s4r8JB/Uic/i6/iNjPMILlFeE0N6XZ+2pkgwRkfMOcx6eoewypTPUoPpzuAINJxJRpHym3V6ZJZ1UfYvzRcQBD/lBeAYrvhpCwukQMkGushKsOS6U+d+2C9ZNeP+U+uwuv/xu8YBCBAgGb8YdNojcGzM4SbCtwvJ0fuOfmCWZvUoiumfE4x7rAhp1pa9OEbUe0a5HL+1v7+JLBgkNZ7Z2biiHaM6za7GjHCXU8rojatEQER+MpgDuQV3ZPx8RKRdiJgPnz9ApBHFYDHLDzDw==");\n""",
      """    cryptolens_handle.signature_verifier.set_exponent_base64(e, "AQAB");\n""",
      """    cryptolens_handle.machine_code_computer.set_machine_code(e, "{machine_code}");\n""".format(machine_code=machine_code),
      """\n""",
      """    std::string saved_response({saved_response});\n""".format(saved_response=_str_lit(self.response)),
      """\n""",
      """    license_key_ = cryptolens_handle.make_license_key(e, saved_response);\n""",
      """\n""",
      """    ASSERT_TRUE(license_key_);\n""",
      """    ASSERT_FALSE(e);\n""",
      """  }\n""",
    ])

class V20180502_Online_KeyTest(BaseKeyTest):
  def __init__(self, *args, **kwargs):
    super(V20180502_Online_KeyTest, self).__init__(*args, **kwargs)
    self.test_name = "v20180502_online_" + self.test_name

  def set_up_test_case(self):
    return "".join([
      """  static void SetUpTestCase() {\n""",
      """    Cryptolens cryptolens_handle;\n""",
      """    cryptolens::Error e;\n""",
      """    cryptolens_handle.signature_verifier.set_modulus_base64(e, "khbyu3/vAEBHi339fTuo2nUaQgSTBj0jvpt5xnLTTF35FLkGI+5Z3wiKfnvQiCLf+5s4r8JB/Uic/i6/iNjPMILlFeE0N6XZ+2pkgwRkfMOcx6eoewypTPUoPpzuAINJxJRpHym3V6ZJZ1UfYvzRcQBD/lBeAYrvhpCwukQMkGushKsOS6U+d+2C9ZNeP+U+uwuv/xu8YBCBAgGb8YdNojcGzM4SbCtwvJ0fuOfmCWZvUoiumfE4x7rAhp1pa9OEbUe0a5HL+1v7+JLBgkNZ7Z2biiHaM6za7GjHCXU8rojatEQER+MpgDuQV3ZPx8RKRdiJgPnz9ApBHFYDHLDzDw==");\n""",
      """    cryptolens_handle.signature_verifier.set_exponent_base64(e, "AQAB");\n""",
      """\n""",
      """    license_key_ = cryptolens_handle.activate(e, "{token}", "{product_id}", "{key_string}", "{machine_code}");\n""".format(key_string=key_string, machine_code=machine_code, token=token, product_id=product_id),
      """\n""",
      """    ASSERT_TRUE(license_key_);\n""",
      """    ASSERT_FALSE(e);\n""",
      """  }\n""",
    ])

activation_results = []
for key_string, machine_code in activations:
  license_key, response = activate(key_string, machine_code)
  activation_results.append((key_string, machine_code, license_key, response))

os.makedirs("generated", exist_ok=True)
for i, (key_string, machine_code, license_key, response) in enumerate(activation_results):
  with open("generated/key_{i}.cpp".format(i=i), "w") as f:
    f.write("#include <cryptolens/tests/gtest_shared.hpp>\n")
    f.write("#include <gtest/gtest.h>\n")
    f.write("\n")
    f.write("namespace tests_v20180502 {\n")
    f.write("\n")
    test_cpp_string = V20180502_Online_KeyTest(license_key, test_name=str(i)).to_string()
    f.write(test_cpp_string); f.write("\n")
    f.write("\n")
    f.write("} // namespace tests_v20180502\n")
    f.write("\n")
    f.write("\n")
    f.write("namespace tests_v20190401 {\n")
    f.write("\n")
    test_cpp_string = V20190401_Online_KeyTest(license_key, test_name=str(i)).to_string()
    f.write(test_cpp_string); f.write("\n")

    test_cpp_string = V20190401_OfflineJson_KeyTest(license_key=license_key, response=response.decode(), test_name=str(i)).to_string()
    f.write(test_cpp_string); f.write("\n")

    test_cpp_string = V20190401_OfflineCompact_KeyTest(license_key=license_key, response=response.decode(), test_name=str(i)).to_string()
    f.write(test_cpp_string); f.write("\n")
    f.write("\n")
    f.write("} // namespace tests_v20190401\n")
